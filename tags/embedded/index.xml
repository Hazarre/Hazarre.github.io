<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>embedded on HenryChang</title><link>https://hazarre.github.io/tags/embedded/</link><description>Recent content in embedded on HenryChang</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 25 May 2020 17:23:51 +0800</lastBuildDate><atom:link href="https://hazarre.github.io/tags/embedded/index.xml" rel="self" type="application/rss+xml"/><item><title>Multiplayer Battleship Over C websocket</title><link>https://hazarre.github.io/posts/cbattleship/</link><pubDate>Mon, 25 May 2020 17:23:51 +0800</pubDate><guid>https://hazarre.github.io/posts/cbattleship/</guid><description>Built an online multiplayer console battleship game in C using web sockets (served on AWS LightSail).
Duration: Apr-May 2020
Github: https://github.com/Hazarre/Multi-player-Battleship/projects</description></item><item><title>Embedded Multi-Function Timer with 8051 Microcontroller</title><link>https://hazarre.github.io/posts/8051mc/</link><pubDate>Thu, 25 Aug 2016 17:23:51 +0800</pubDate><guid>https://hazarre.github.io/posts/8051mc/</guid><description>Duration: Jul-Aug 2016. With: Prof. Taikang Ning, Trinity College, CT.
Summary Designed, implemented and tested a multi-function timer after studying 8051 embedded systems. 8051 Microcontroller Embedded Multi-Function Timer Applied knowledge learned to implement a power amplifier to run earphone jack signals on a 20W speaker. Results Demo Project Planning Document. Testing LED Video. Final Timer Demo Video. Circuit Design and Wire Wrapping Code for programming 2k EEPROM link BaseN EQU 30h	; set the base addr for normal display BaseS EQU 34h	; set the base addr for stopwatch display ; Program initialization org 0000h ajmp MainProg org 0003h; jump address for the ET0 interrupt ajmp ISRIE0; ]ump to the starting location of interrupt service routine ISRIE0 org 000bh ; jump address for timer0 overflow interrupt ajmp ISRTF0 ; ]ump to the starting location of interrupt service routine ISRTF0 org 0030h; starting address of the main MainProg ;mov TMOD, #11h ;initialize Timer0 setb TR0 ; enable Timer0 to start counting setb ET0 ; enable TF0 interrupt setb IT0; enable IT0 mov TH0, #0ECh mov TL0, #7Fh ; initialize each digit in normal mode mov 30h, #00h mov 31h, #10h mov 32h, #20h mov 33h, #30h ; initialize each digit in stop-watch mode mov 34h, #00h mov 35h, #10h mov 36h, #20h mov 37h, #30h mov 40h, #00h ; set addr 40h for one second-count in normal mode mov 41h, #00h ; set addr 41h for ten msec-count in stop watch mode mov 42h, #02h ; set addr 42h to count the times of External Interrupt mov 43h, #00h ; set addr to save how many 5-msec required for per carry unit e.</description></item></channel></rss>